<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kaishengit.tms.mapper.RolesMapper">
  <resultMap id="BaseResultMap" type="com.kaishengit.tms.entity.Roles">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="roles_name" jdbcType="VARCHAR" property="rolesName" />
    <result column="roles_code" jdbcType="VARCHAR" property="rolesCode" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, roles_name, roles_code, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.kaishengit.tms.entity.RolesExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from roles
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from roles
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from roles
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.kaishengit.tms.entity.RolesExample">
    delete from roles
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.kaishengit.tms.entity.Roles">
    insert into roles (id, roles_name, roles_code, 
      create_time, update_time)
    values (#{id,jdbcType=INTEGER}, #{rolesName,jdbcType=VARCHAR}, #{rolesCode,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.kaishengit.tms.entity.Roles" useGeneratedKeys="true" keyProperty="id">
    insert into roles
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="rolesName != null">
        roles_name,
      </if>
      <if test="rolesCode != null">
        roles_code,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="rolesName != null">
        #{rolesName,jdbcType=VARCHAR},
      </if>
      <if test="rolesCode != null">
        #{rolesCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.kaishengit.tms.entity.RolesExample" resultType="java.lang.Long">
    select count(*) from roles
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update roles
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.rolesName != null">
        roles_name = #{record.rolesName,jdbcType=VARCHAR},
      </if>
      <if test="record.rolesCode != null">
        roles_code = #{record.rolesCode,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update roles
    set id = #{record.id,jdbcType=INTEGER},
      roles_name = #{record.rolesName,jdbcType=VARCHAR},
      roles_code = #{record.rolesCode,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.kaishengit.tms.entity.Roles">
    update roles
    <set>
      <if test="rolesName != null">
        roles_name = #{rolesName,jdbcType=VARCHAR},
      </if>
      <if test="rolesCode != null">
        roles_code = #{rolesCode,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kaishengit.tms.entity.Roles">
    update roles
    set roles_name = #{rolesName,jdbcType=VARCHAR},
      roles_code = #{rolesCode,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="findRolesAndPermission" resultMap="rolesMap">

    SELECT
    roles.*, permission.id AS permissionId,
    permission.create_time AS permissionCreateTime,
    permission_code,
    permission_name,
    permission_type,
    url,
    permission.update_time AS permissionUpdateTime,
    parent_id
    FROM
    roles
    INNER JOIN roles_primission rp ON roles.id = rp.roles_id
    INNER JOIN permission ON rp.permission_id = permission.id

  </select>

  <select id="findByIdRolesAndPermission" resultMap="rolesMap">

    SELECT
      roles.*,
      permission.id AS permissionId,
      permission.create_time AS permissionCreateTime,
      permission_code,
      permission_name,
      permission_type,
      url,
      permission.update_time AS permissionUpdateTime,
      parent_id
    FROM
      roles
    INNER JOIN roles_primission rp ON roles.id = rp.roles_id
    INNER JOIN permission ON rp.permission_id = permission.id
    WHERE roles.id = #{id}
  </select>

  <resultMap id="rolesMap" type="com.kaishengit.tms.entity.Roles" extends="BaseResultMap">
    <collection property="permissionList" ofType="Permission">
      <id column="permissionId" property="id"/>
        <result property="parentId" column="parent_id"/>
        <result property="permissionCode" column="permission_code"/>
        <result property="permissionName" column="permission_name"/>
        <result property="permissionType" column="permission_type"/>
        <result property="url" column="url"/>
        <result property="createTime" column="permissionCreateTime"/>
        <result property="updateTime" column="permissionUpdateTime"/>
    </collection>
    
  </resultMap>

<select id="findRoleByAccountId" resultType="com.kaishengit.tms.entity.Roles">
   SELECT * FROM roles WHERE id IN (SELECT roles_id FROM account_roles WHERE account_id = #{accountId})
</select>

 <!-- <mapper namespace="com.kaishengit.mapper.StudentMapper">

    <resultMap id="baseMap" type="com.kaishengit.entity.Student">
      <id column="id" property="id" />
      <result column="student_name" property="studentName"/>
      <result column="age" property="age"/>
      <result column="address" property="address"/>
      <result column="id" property="schoolId"/>
    </resultMap>


    <resultMap id="studentMap" type="com.kaishengit.entity.Student" extends="baseMap">
      <association property="school" javaType="com.kaishengit.entity.School">
        <id column="id" property="id"/>
        <result column="school_name" property="schoolName"/>
        <result column="tel" property="tel"/>
      </association>

    </resultMap>

    <resultMap id="studentMapWithTag" type="com.kaishengit.entity.Student" extends="baseMap">
      <collection property="tagList" ofType="com.kaishengit.entity.Tag">
        <id column="tid" property="id"/>
        <result column="tag_name" property="tagName"/>
      </collection>
    </resultMap>

    <select id="findByIdTag" parameterType="int" resultMap="studentMapWithTag">

      SELECT
      stu.id,
      stu.student_name,
      stu.age,
      stu.address,
      stu.school_id,
      st.tid,
      t.tag_name
      FROM
      t_student stu
      INNER JOIN t_stu_tag st ON stu.id = st.sid
      INNER JOIN t_tag t ON st.tid = t.id
      WHERE
      stu.id = #{id};

    </select>




    &lt;!&ndash;查询单个&ndash;&gt;
    <select id="findById" parameterType="int" resultMap="studentMap">
      SELECT
      stu.id,
      stu.student_name,
      stu.age,
      stu.address,
      stu.school_id,
      sch.school_name,
      sch.tel
      FROM
      t_student stu
      INNER JOIN t_school sch ON stu.school_id = sch.id
      WHERE
      stu.id = #{id};

    </select>

    &lt;!&ndash;使用OGNL的方式查找单个&ndash;&gt;
    <select id="findId" parameterType="int" resultType="com.kaishengit.entity.Student">
      SELECT
      stu.id,
      stu.student_name,
      stu.age,
      stu.address,
      stu.school_id,
      sch.id as 'school.id',
      sch.school_name as 'school.schoolName',
      sch.tel as 'school.tel'
      FROM
      t_student stu
      INNER JOIN t_school sch ON stu.school_id = sch.id
      WHERE
      stu.id = #{id};

    </select>

    &lt;!&ndash;查找全部&ndash;&gt;
    <select id="findAll" resultMap="studentMap">
      SELECT
      stu.id,
      stu.student_name,
      stu.age,
      stu.address,
      stu.school_id,
      sch.school_name,
      sch.tel
      FROM
      t_student stu
      INNER JOIN t_school sch ON stu.school_id = sch.id

    </select>-->




</mapper>